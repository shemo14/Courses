import React, { Component } from "react";import {	View,	Text,	Image,	TouchableOpacity,	Platform,	Dimensions,	Linking,	ImageBackground,	FlatList} from "react-native";import {Container, Content, Header, Button, Left, Body, Right, Card, Toast} from 'native-base'import styles from '../../assets/styles';import {NavigationEvents} from "react-navigation";import axios from "axios";import CONST from "../consts";import Spinner from "react-native-loading-spinner-overlay";import {connect} from "react-redux";class Lectures extends Component {	constructor(props){		super(props);		this.state={			lectures	: [],			spinner     : true,		}	}	componentWillMount() {		this.setState({ spinner  : true });		const { id } = this.props.navigation.state.params;		axios({			url         : CONST.url + 'lectures',			method      : 'POST',			data		: { course_id : id},			headers     : { Authorization: this.props.user.token },		}).then(response => {			this.setState({ spinner  : false, lectures: response.data.data })		});	}	static navigationOptions = () => ({		header      : null,		drawerLabel : () => null ,	});	_keyExtractor = (item, index) => item.id;	navigateToLecture(status, lecture){		const { exTime, name, expiration, termName, termId, courseId, categoryId, show } = this.props.navigation.state.params;		if (status){			this.props.navigation.navigate('video', { show, lecture, exTime, name, expiration, termName, termId, courseId, categoryId })		}else{			Toast.show({				text: 'الرجاء الانتهاء من المحاضرات السابقة اولا',				type: "danger",				duration: 3000,				textStyle: {					color: "#fff",					fontFamily: 'sukar',					textAlign: 'center',				}			});		}	}	renderItems = (item) => {		return(			<TouchableOpacity				onPress     = {() => this.navigateToLecture(item.item.is_passed, item.item)}				key         = { item.index }				style       = {[styles.position_R, styles.height_200, { alignSelf: 'flex-start', marginBottom: 25, flex: 1, marginHorizontal: 6 }]}>				<Card style={{ borderRadius: 10, padding: 0 }}>					<Image source={{ uri: item.item.images  }} resizeMode={'cover'} style={{ width: '100%', height: 140, borderTopLeftRadius: 10, borderTopRightRadius: 10, borderBottomWidth: 2, borderBottomColor: '#26336d'}}/>					<Image source={require('../../assets/images/video.png')} style={{ height: 70, width: 70, justifyContent: 'center', alignItems: 'center', marginTop: 110, right: -5, position: 'absolute' }} />					<View style={{ height: 60, borderWidth: 1, borderColor: '#d3d3d3', borderBottomLeftRadius: 10, borderBottomRightRadius: 10, padding: 5, borderTopWidth: 0 }}>						<Text style={[styles.textRegular, { fontSize: 16, alignSelf: 'flex-start', color: '#3e3e3e' }]}>{ item.item.name }</Text>						<Text style={[styles.textRegular, { alignSelf: 'flex-start', color: '#b7b7b7', marginTop: 5 }]}>{ item.item.instructor }</Text>					</View>				</Card>			</TouchableOpacity>		);	};	onFocus(){		this.componentWillMount()	}	render() {		const { name, expiration, termName, termId, courseId, categoryId } = this.props.navigation.state.params;		return (			<Container>				<Spinner visible = { this.state.spinner } />				<NavigationEvents onWillFocus={() => this.onFocus()} />				<Header style={styles.headerView}>					<Right style={{ flex: 0 }}>						<Button transparent onPress={() => this.props.navigation.navigate('courses', { expiration, termId, termName, id: courseId, categoryId })}>							<Image source={require('../../assets/images/back.png')} resizeMode={'contain'} style={{ width: 25, height: 25 }}/>						</Button>					</Right>					<Body style={{ width: '100%', alignItems: 'center', alignSelf: 'center' }}>					<Text style={[styles.textBold, styles.text_White, { fontSize: 18, alignSelf: 'center' }]}>{ name }</Text>					</Body>					<Left style={{ flex: 0 }}>						<Image source={require('../../assets/images/vector.png')} resizeMode={'contain'} style={{ width: 100, height: 100, top: 5, right: -5 }}/>					</Left>				</Header>				<Content contentContainerStyle={styles.bgFullWidth}>					<View style={{ padding: 15 }}>						<FlatList							data                    = {this.state.lectures}							renderItem              = {(item) => this.renderItems(item)}							numColumns              = {2}							keyExtractor            = {this._keyExtractor}						/>					</View>				</Content>			</Container>		);	}}const mapStateToProps = ({ auth, profile }) => {	return {		auth    : auth.user,		user    : profile.user	};};export default connect(mapStateToProps, {  })(Lectures);