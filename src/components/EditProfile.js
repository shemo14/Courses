import React, { Component } from "react";import { View, Text, Image, TouchableOpacity, Platform, Dimensions, I18nManager, KeyboardAvoidingView } from "react-native";import { Container, Content, Header, Button, Left, Body, Right, Item, Input, Form, Label, Textarea} from 'native-base'import styles from '../../assets/styles';import {NavigationEvents} from "react-navigation";import axios from "axios";import CONST from "../consts";import Spinner from "react-native-loading-spinner-overlay";import {connect} from "react-redux";import ProgressCircle from "react-native-progress-circle";import COLORS from "../consts/colors";import * as ImagePicker from 'expo-image-picker';import * as Permissions from 'expo-permissions';import { userLogin, profile, updateProfile } from '../actions'class EditProfile extends Component {	constructor(props){		super(props);		this.state={			name		: this.props.user.name,			spinner     : false,			userImage	: this.props.user.avatar,			base64		: null,		}	}	askPermissionsAsync = async () => {		await Permissions.askAsync(Permissions.CAMERA);		await Permissions.askAsync(Permissions.CAMERA_ROLL);	};	_pickImage = async () => {		this.askPermissionsAsync();		let result = await ImagePicker.launchImageLibraryAsync({			allowsEditing: true,			aspect: [4, 3],			base64:true		});		console.log(result);		if (!result.cancelled) {			this.setState({ userImage: result.uri ,base64:result.base64});		}	};	componentWillMount() {		this.setState({ spinner  : true });		axios({			url         : CONST.url + 'app_info',			method      : 'GET',			headers     : { Authorization: this.props.user.token },		}).then(response => {			this.setState({ spinner  : false, about: response.data.data })		});	}	static navigationOptions = () => ({		header      : null,		drawerLabel : ({ focused }) => ( <Text style={[styles.textRegular, styles.textSize_18, { color: focused ? '#f6b549' : '#27336d' }]}>عن التطبيق</Text> ) ,		drawerIcon  : ({ focused }) => ( <Image style={[styles.smImage]} source={focused ? require('../../assets/images/yellow_info.png') : require('../../assets/images/blue_info.png')} resizeMode={'cover'}/>)	});	onUpdateProfile(){		this.setState({ spinner: true });		const data = {			token: this.props.user.token,			image: this.state.base64,			name : this.state.name		};		this.props.updateProfile(data, this.props);	}	componentWillReceiveProps(nextProps) {		this.setState({ spinner: false });	}	renderSubmit() {		if (this.state.name == '') {			return (				<TouchableOpacity style={[ styles.Width_90, styles.flexCenter, styles.flexCenter, styles.marginVertical_15, styles.height_50 , {					backgroundColor:'#999', borderRadius: 10				}]}				>					<Text style={[styles.textRegular, styles.textSize_16, styles.text_White]}>تعديل</Text>				</TouchableOpacity>			);		}		return (			<TouchableOpacity				style={[ styles.Width_90, styles.flexCenter, styles.flexCenter, styles.marginVertical_15, styles.height_50, { borderRadius: 10, backgroundColor: '#f6b145' }]}				onPress={() => this.onUpdateProfile()}>				<Text style={[styles.textRegular, styles.textSize_16, styles.text_White]}>تعديل</Text>			</TouchableOpacity>		);	}	onFocus(){	}	render() {		return (			<Container>				<Spinner visible = { this.state.spinner } />				<NavigationEvents onWillFocus={() => this.onFocus()} />				<Header style={styles.headerView}>					<Right style={{ flex: 0 }}>						<Button transparent onPress={() => this.props.navigation.goBack()}>							<Image source={require('../../assets/images/back.png')} resizeMode={'contain'} style={{ width: 25, height: 25 }}/>						</Button>					</Right>					<Body style={{ width: '100%', alignItems: 'center', alignSelf: 'center' }}>					<Text style={[styles.textBold, styles.text_White, { fontSize: 18, alignSelf: 'center' }]}>حسابي</Text>					</Body>					<Left style={{ flex: 0 }}>						<Image source={require('../../assets/images/vector.png')} resizeMode={'contain'} style={{ width: 100, height: 100, top: 5, right: -5 }}/>					</Left>				</Header>				<Content contentContainerStyle={styles.bgFullWidth}>					<View style={{ padding: 15 }}>						<View style={{ alignItems: 'center', justifyContent: 'center' }}>							<TouchableOpacity onPress={this._pickImage} style={[styles.viewUser, styles.justifyCenter]}>								<View style={[styles.position_R, styles.flexCenter, styles.zIndexUp, styles.Width_100, styles.marginHorizontal_25 ]}>									<ProgressCircle										percent={30}										radius={50}										borderWidth={4}										color="#f3ae44"										shadowColor="#fff"										bgColor="#27336d"									>										<Image style={[styles.width_80, styles.height_80, { borderRadius: 50 }]} source={{ uri: this.state.userImage }}/>									</ProgressCircle>								</View>							</TouchableOpacity>							<View style={[styles.position_R, styles.height_70, styles.flexCenter, styles.marginBottom_5, { marginTop: 30 } ]}>								<Item floatingLabel style={[styles.item, styles.position_R ]}>									<Label style={[styles.label, styles.textRegular ,{ color:this.state.phoneStatus === 1 ?  COLORS.blue :  COLORS.gray}]}>اسم المستخدم</Label>									<Input value={ this.state.name } style={[styles.input, styles.height_50, (this.state.phoneStatus === 1 ? styles.Active : styles.noActive)]} onChangeText={(name) => this.setState({name})} />								</Item>							</View>							{ this.renderSubmit() }						</View>					</View>				</Content>			</Container>		);	}}const mapStateToProps = ({ auth, profile }) => {	return {		auth    : auth.user,		user    : profile.user	};};export default connect(mapStateToProps, { updateProfile })(EditProfile);