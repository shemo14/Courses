import React, { Component } from "react";import {	View,	Text,	Image,	TouchableOpacity,	Platform,	Dimensions,	Linking,	ImageBackground,	FlatList} from "react-native";import { Container, Content, Header, Button, Left, Body, Right, Card} from 'native-base'import styles from '../../assets/styles';import {NavigationEvents} from "react-navigation";import CountDown from 'react-native-countdown-component';import axios from "axios";import CONST from "../consts";import Spinner from "react-native-loading-spinner-overlay";import {connect} from "react-redux";class Courses extends Component {	constructor(props){		super(props);		this.state={			courses     : [],			spinner     : true,			expiration  : 0,			show		: false		}	}	componentWillMount() {		this.setState({ spinner  : true });		const { id } = this.props.navigation.state.params;		axios({			url         : CONST.url + 'courses',			method      : 'POST',			data		: { semster_id : id},			headers     : { Authorization: this.props.user.token },		}).then(response => {			this.setState({ spinner  : false, courses: response.data.data, expiration: response.data.extra.expiration/1000, show: response.data.extra.show })		});	}	static navigationOptions = () => ({		header      : null,		drawerLabel : () => null ,	});	renderNoData(){		if (this.state.courses == 0){			return (				<View style={{ flex: 1, width: '100%', height: '100%', justifyContent: 'center', alignItems: 'center' }}>					<Image source={require('../../assets/images/no_data.png')} resizeMode={'contain'} style={{ width: 150, height: 200 }}/>					<Text style={[styles.textRegular, styles.textCenter, { color: '#999', top: -10 }]}>لا يوجد بيانات</Text>				</View>			)		}	}	_keyExtractor = (item, index) => item.id;	renderItems = (item) => {		const { name, expiration, termId, termName, categoryId } = this.props.navigation.state.params;		const courseId = this.props.navigation.state.params.id;		const show	   = this.state.show;		return(			<TouchableOpacity				onPress     = {() => this.props.navigation.navigate('lectures', { id: item.item.id, name : item.item.name, exTime: this.state.expiration, courseName: name, expiration, termName, termId, courseId, categoryId, show })}				key         = { item.index }				style       = {[styles.position_R, styles.height_150, { alignSelf: 'flex-start', marginBottom: 25, flex: 1, marginHorizontal: 6 }]}>				<Card style={{ borderRadius: 10, padding: 0 }}>					<Image source={{ uri: item.item.image  }} resizeMode={'cover'} style={{ width: '100%', height: '100%', borderRadius: 10,}}/>					<ImageBackground source={require('../../assets/images/circle.png')} style={{ height: 70, width: 70, justifyContent: 'center', alignItems: 'center', marginTop: 110, right: 0, position: 'absolute' }}>						<Text style={{ color: '#423a30', textAlign: 'center', marginBottom: 5 }}>{ item.item.lectures_number }</Text>					</ImageBackground>				</Card>				<Text style={[styles.textRegular, { fontSize: 16, alignSelf: 'flex-start', color: '#3c3c3c', left: 20 }]}>{ item.item.name }</Text>			</TouchableOpacity>		);	};	onFocus(){		this.componentWillMount()	}	render() {		const { courses } = this.state;		const { name, expiration, termId, termName, categoryId } = this.props.navigation.state.params;		return (			<Container>				<Spinner visible = { this.state.spinner } />				<NavigationEvents onWillFocus={() => this.onFocus()} />				<Header style={styles.headerView}>					<Right style={{ flex: 0 }}>						<Button transparent onPress={() => this.props.navigation.navigate('term', { id: termId, name: termName, categoryId })}>							<Image source={require('../../assets/images/back.png')} resizeMode={'contain'} style={{ width: 25, height: 25 }}/>						</Button>					</Right>					<Body style={{ width: '100%', alignItems: 'center', alignSelf: 'center' }}>					<Text style={[styles.textBold, styles.text_White, { fontSize: 18, alignSelf: 'center' }]}>{ name }</Text>					</Body>					<Left style={{ flex: 0 }}>						<Image source={require('../../assets/images/vector.png')} resizeMode={'contain'} style={{ width: 100, height: 100, top: 5, right: -5 }}/>					</Left>				</Header>				<Content contentContainerStyle={styles.bgFullWidth}>					{ this.renderNoData() }					<View style={{ padding: 15 }}>						{							this.state.show || Platform.OS === 'android' ?								<View>									<Text style={[styles.textRegular, styles.textRight, { color: '#999', fontSize: 18, marginVertical: 5, textAlign: 'center' }]}>باقي علي تجديدالاشتراك</Text>									<View style={{ flexDirection: 'row', alignSelf: 'center', marginBottom: 10 }}>										<CountDown											until={expiration}											size={17}										/>									</View>								</View> : null						}						<FlatList							data                    = {courses}							renderItem              = {(item) => this.renderItems(item)}							numColumns              = {2}							keyExtractor            = {this._keyExtractor}						/>					</View>				</Content>			</Container>		);	}}const mapStateToProps = ({ auth, profile }) => {	return {		auth    : auth.user,		user    : profile.user	};};export default connect(mapStateToProps, {  })(Courses);